"yr_built" = "Interval",
"yr_renovated" = "Interval",
"zipcode" = "Nominal",
"lat" = "Ratio",
"long" = "Ratio",
"sqft_living15" = "Ratio",
"sqft_lot15" = "Ratio"
)
# Create a table with attribute name, type, and measurement scale
data_info <- data.frame(
Attribute = names(data),
Data_Type = column_types,
Measurement_Scale = measurement_scale[names(data)]
)
if (exists("data")) {
print(dim(data))  # Should return number of rows and columns
} else {
print("Data not found. Please ensure it's loaded correctly.")
}
# Ensure dataset is loaded
if (!exists("data") || ncol(data) == 0) {
stop("Dataset is not loaded or has no columns. Please check your data import.")
}
# Check if 'data' exists and is not NULL
if (!exists("data") || is.null(data)) {
stop("Dataset 'data' is not found. Please check if it is loaded correctly.")
}
# Check if 'data' has columns
if (ncol(data) == 0) {
stop("Dataset is empty (0 columns). Please reload your data.")
}
housing_data$Type = c ("id", "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition", "grade",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated",
"zipcode", "lat", "long", "sqft_living15", "sqft_lot15")
attributes_table$Type = c ("id", "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition", "grade",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated",
"zipcode", "lat", "long", "sqft_living15", "sqft_lot15")
attributes_table <- data.frame(
Attribute = c( "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition", "grade",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated",
"zipcode", "lat", "long", "sqft_living15", "sqft_lot15"),
Description = c(
"Date when the house was sold",
"Sale price of the house",
"Number of bedrooms",
"Number of bathrooms",
"Living area in square feet",
"Lot area in square feet",
"Number of floors",
"Whether the house is waterfront (1: Yes, 0: No)",
"Number of times the house has been viewed",
"Condition of the house (1-5 scale)",
"Overall grade of the house (1-13 scale)",
"Square footage of the house above ground",
"Square footage of the basement",
"Year the house was built",
"Year of renovation (0 if never renovated)",
"Zip code of the house location",
"Latitude coordinate of the house",
"Longitude coordinate of the house",
"Average living space in neighboring 15 houses",
"Average lot space in neighboring 15 houses")
)
print(typeof("date", price", "bedrooms", "bathrooms", "sqft_living",
print(typeof(housing_data$date))
print(typeof(housing_data$price))
print(typeof(housing_data$bedrooms))
print(typeof(housing_data$bathrooms))
print(typeof(housing_data$sqft_living))
print(typeof(housing_data$sqft_lot))
print(typeof(housing_data$floors))
print(typeof(housing_data$waterfront))
print(typeof(housing_data$view))
print(typeof(housing_data$condition))
print(typeof(housing_data$grade))
print(typeof(housing_data$sqft_above))
print(typeof(housing_data$sqft_basement))
print(typeof(housing_data$yr_built))
print(typeof(housing_data$yr_renovated))
print(typeof(housing_data$zipcode))
print(typeof(housing_data$lat))
print(typeof(housing_data$long))
print(typeof(housing_data$sqft_living15))
print(typeof(housing_data$sqft_lot15))
# Create a data frame with attribute names and descriptions
attributes_table <- data.frame(
Attribute = c( "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated",
"statezip", "country"),
Description = c(
"Date when the house was sold",
"Sale price of the house",
"Number of bedrooms",
"Number of bathrooms",
"Living area in square feet",
"Lot area in square feet",
"Number of floors",
"Whether the house is waterfront (1: Yes, 0: No)",
"Number of times the house has been viewed",
"Condition of the house (1-5 scale)",
"Overall grade of the house (1-13 scale)",
"Square footage of the house above ground",
"Square footage of the basement",
"Year the house was built",
"Year of renovation (0 if never renovated)",
"Zip code of the house location"
"Country of the house location
)
# Print the table
print(attributes_table)
View(attributes_table)
print(typeof(housing_data$date))
print(typeof(housing_data$price))
print(typeof(housing_data$bedrooms))
print(typeof(housing_data$bathrooms))
print(typeof(housing_data$sqft_living))
print(typeof(housing_data$sqft_lot))
print(typeof(housing_data$floors))
print(typeof(housing_data$waterfront))
print(typeof(housing_data$view))
print(typeof(housing_data$condition))
print(typeof(housing_data$sqft_above))
print(typeof(housing_data$sqft_basement))
print(typeof(housing_data$yr_built))
print(typeof(housing_data$yr_renovated))
print(typeof(housing_data$statezip))
print(typeof(housing_data$country))
attributes_table <- data.frame(
Attribute = c( "date", "price", "bedrooms", "bathrooms", "sqft_living",
attributes_table <- data.frame(
Attribute = c( "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated", "city", street",
"statezip", "country"))
attributes_table <- data.frame(
Attribute = c( "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated", "city", street",
"statezip", "country")
attributes_table <- data.frame(
Attribute = c( "date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition",
"sqft_above", "sqft_basement", "yr_built", "yr_renovated", "city", street",
"statezip", "country")
attributes_table <- data.frame(
Attribute = c("date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition",  "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "street", "city", "statezip", "country"),
Description = c("Date when the house was sold",
"Sale price of the house",
"Number of bedrooms",
"Number of bathrooms",
"Living area in square feet",
"Lot area in square feet",
"Number of floors",
"Whether the house is waterfront (1: Yes, 0: No)",
"Number of times the house has been viewed",
"Condition of the house (1-5 scale)",
"Square footage of the house above ground",
"Square footage of the basement",
"Year the house was built",
"Year of renovation (0 if never renovated)",
"Street address of house",
"City of the house location",
"Zip code of the house location",
"Country of the house location")
)
print(typeof(housing_data$date))
print(typeof(housing_data$price))
print(typeof(housing_data$bedrooms))
print(typeof(housing_data$bathrooms))
print(typeof(housing_data$sqft_living))
print(typeof(housing_data$sqft_lot))
print(typeof(housing_data$floors))
print(typeof(housing_data$waterfront))
print(typeof(housing_data$view))
print(typeof(housing_data$condition))
print(typeof(housing_data$sqft_above))
print(typeof(housing_data$sqft_basement))
print(typeof(housing_data$yr_built))
print(typeof(housing_data$yr_renovated))
print(typeof(housing_data$statezip))
print(typeof(housing_data$country))
attributes_table$Type = c ( "character", "double", "double", "double",
"integer", "integer", "double", "integer", "integer", "integer",
"integer", "integer", "integer", "integer",
"character", "character", "character", "character")
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
library(knitr)
kable(attributes_table, caption = "Housing Data",  booktabs = T, longtable = T) %>%
kableExtra::kable_styling(latex_options = c("striped", "repeat_header", "hold_position"),
position = "center") %>% row_spec(0, bold = T) %>% column_spec(2, width = "4.75in") %>%
landscape()
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
library(knitr)
kable(attributes_table, caption = "Housing Data",  booktabs = T, longtable = T) %>%
kableExtra::kable_styling(latex_options = c("striped", "repeat_header", "hold_position"),
position = "center") %>% row_spec(0, bold = T) %>% column_spec(2, width = "4.75in") %>%
View(attributes_table)
if (!require("kableExtra")) install.packages("kableExtra", dependencies = TRUE)
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
library(knitr)
library(kableExtra)
# Generate a well-formatted table
styled_table <- kable(attributes_table, format = "html", caption = "ðŸ“Œ USA House Prices Dataset - Attribute Information") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F, position = "center") %>%
column_spec(1, bold = TRUE, color = "black") %>%
column_spec(2, italic = TRUE, color = "blue") %>%
column_spec(3, width = "40em") %>%
row_spec(0, bold = TRUE, color = "white", background = "black")
# Display the table
styled_table
install.packages("kableExtra")
install.packages("kableExtra")
# Generate a well-formatted table in landscape mode
styled_table <- kable(data_info, format = "latex", caption = "ðŸ“Œ USA House Prices Dataset - Attribute Information") %>%
kable_styling(latex_options = c("striped", "hover", "condensed", "responsive"),
full_width = F, position = "center") %>%
column_spec(1, bold = TRUE, color = "black") %>%
column_spec(2, italic = TRUE, color = "blue") %>%
column_spec(3, width = "40em") %>%
row_spec(0, bold = TRUE, color = "white", background = "black")
# Generate a well-formatted table in landscape mode
styled_table <- kable(attributes_table, format = "latex", caption = "ðŸ“Œ USA House Prices Dataset - Attribute Information") %>%
kable_styling(latex_options = c("striped", "hover", "condensed", "responsive"),
full_width = F, position = "center") %>%
column_spec(1, bold = TRUE, color = "black") %>%
column_spec(2, italic = TRUE, color = "blue") %>%
column_spec(3, width = "40em") %>%
row_spec(0, bold = TRUE, color = "white", background = "black")
# Display the table
styled_table
# Generate a well-formatted table
styled_table <- kable(attributes_table, format = "html", caption = "ðŸ“Œ USA Housing Data") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F, position = "center") %>%
column_spec(1, bold = TRUE, color = "black") %>%
column_spec(2, italic = TRUE, color = "blue") %>%
column_spec(3, width = "40em") %>%
row_spec(0, bold = TRUE, color = "white", background = "black")
# Display the table
styled_table
summary(attributes_table$date)
#PART 2
#Summary statistics for each attribute
summary(attributes_table$date)
summary(attributes_table$price)
#PART 2
#Summary statistics for each attribute
summary(attributes_table$date)
summary(attributes_table$price)
summary(attributes_table$bedrooms)
```
#PART 2
#Summary statistics for each attribute
summary(attributes_table$date)
summary(attributes_table$price)
summary(attributes_table$bedrooms)
summary(attributes_table$sqft_living)
```
summary(housing_data$date)
bstats = basicStats(housing_data)[c("Mean", "Stdev", "Median", "Minimum", "Maximum",
"NAs"), ]
# Install required package if not installed
if (!require("psych")) install.packages("psych", dependencies = TRUE)
# Load the library
library(psych)
install.packages("psych")
# Install required package if not installed
if (!require("psych")) install.packages("psych", dependencies = TRUE)
# Load the library
library(psych)
describe(housing_data)
```
describe(housing_data)
summary(housing_data$price)
```
describe(housing_data)
summary(housing_data$price)
describe(housing_data$price)
```
# Select only numerical columns
numeric_data <- housing_data[sapply(housing_data, is.numeric)]
# Create a summary table
summary_table <- data.frame(
Attribute = colnames(numeric_data),
Min = sapply(numeric_data, min, na.rm = TRUE),
Max = sapply(numeric_data, max, na.rm = TRUE),
Mean = sapply(numeric_data, mean, na.rm = TRUE),
Median = sapply(numeric_data, median, na.rm = TRUE),
SD = sapply(numeric_data, sd, na.rm = TRUE)
)
print(summary_table)
# Select only numeric columns
numeric_data <- housing_data[sapply(housing_data, is.numeric)]
# Create a summary table, ensuring NAs are handled correctly
summary_table <- data.frame(
Attribute = colnames(numeric_data),
Min = sapply(numeric_data, function(x) min(x, na.rm = TRUE)),
Max = sapply(numeric_data, function(x) max(x, na.rm = TRUE)),
Mean = sapply(numeric_data, function(x) mean(x, na.rm = TRUE)),
Median = sapply(numeric_data, function(x) median(x, na.rm = TRUE)),
SD = sapply(numeric_data, function(x) sd(x, na.rm = TRUE))
)
# Print the corrected summary table
print(summary_table)
# Melt the summary statistics data for plotting
library(reshape2)
install.packages("reshape2")
# Melt the summary statistics data for plotting
library(reshape2)
summary_melted <- melt(summary_stats, id.vars = "Attribute", variable.name = "Statistic")
# Melt the summary statistics data for plotting
library(reshape2)
summary_melted <- melt(summary_table, id.vars = "Attribute", variable.name = "Statistic")
# Plot histograms of the statistics
ggplot(summary_melted, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Statistic, scales = "free") +
labs(title = "Histogram of Summary Statistics", x = "Value", y = "Frequency") +
theme_minimal()
install.packages("ggplot2")
# Melt the summary statistics data for plotting
library(reshape2)
summary_melted <- melt(summary_table, id.vars = "Attribute", variable.name = "Statistic")
# Plot histograms of the statistics
ggplot(summary_melted, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Statistic, scales = "free") +
labs(title = "Histogram of Summary Statistics", x = "Value", y = "Frequency") +
theme_minimal()
library(ggplot2)
# Plot histograms of the statistics
ggplot(summary_melted, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Statistic, scales = "free") +
labs(title = "Histogram of Summary Statistics", x = "Value", y = "Frequency") +
theme_minimal()
# Plot histograms of the statistics
ggplot(summary_melted, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Statistic, scales = "free") +
labs(title = "Histogram of Summary Statistics", x = "Value", y = "Frequency") +
theme_minimal()
# Histogram for Mean of Numeric Data
hist(summary_stats$Mean, main = "Histogram of Means", xlab = "Mean Values", col = "lightblue", border = "black")
knitr::opts_chunk$set(echo = TRUE)
# Install required packages if not already installed
if (!require("httr")) install.packages("httr", dependencies = TRUE)
# Set Kaggle credentials (Ensure your Kaggle API key is in ~/.kaggle/kaggle.json)
Sys.setenv(KAGGLE_CONFIG_DIR = "~/.kaggle")
head(housing_data)
summary(housing_data)
str(housing_data)
#install.packages("DT")
#library(DT)
#datatable(housing_data)
#View(housing_data)
#List column names
names(housing_data)
#When was the data acquired?
min(housing_data$date, na.rm = TRUE)
max(housing_data$date, na.rm = TRUE)
#ANSWER: > min(housing_data$date, na.rm = TRUE)
#[1] "2014-05-02 00:00:00"
#> max(housing_data$date, na.rm = TRUE)
#[1] "2014-07-10 00:00:00"
#Where was the data acquired? (geographical location)
table(housing_data$city)
city_table <-as.data.frame(table(housing_data$city))
colnames(city_table) <-c("City", "Frequency")
head(city_table)
View(city_table)
# Create a data frame with attribute names and descriptions
attributes_table <- data.frame(
Attribute = c("date", "price", "bedrooms", "bathrooms", "sqft_living",
"sqft_lot", "floors", "waterfront", "view", "condition",  "sqft_above", "sqft_basement", "yr_built", "yr_renovated", "street", "city", "statezip", "country"),
Description = c("Date when the house was sold",
"Sale price of the house",
"Number of bedrooms",
"Number of bathrooms",
"Living area in square feet",
"Lot area in square feet",
"Number of floors",
"Whether the house is waterfront (1: Yes, 0: No)",
"Number of times the house has been viewed",
"Condition of the house (1-5 scale)",
"Square footage of the house above ground",
"Square footage of the basement",
"Year the house was built",
"Year of renovation (0 if never renovated)",
"Street address of house",
"City of the house location",
"Zip code of the house location",
"Country of the house location")
)
# Print the table
print(attributes_table)
View(attributes_table)
print(typeof(housing_data$date))
print(typeof(housing_data$price))
print(typeof(housing_data$bedrooms))
print(typeof(housing_data$bathrooms))
print(typeof(housing_data$sqft_living))
print(typeof(housing_data$sqft_lot))
print(typeof(housing_data$floors))
print(typeof(housing_data$waterfront))
print(typeof(housing_data$view))
print(typeof(housing_data$condition))
print(typeof(housing_data$sqft_above))
print(typeof(housing_data$sqft_basement))
print(typeof(housing_data$yr_built))
print(typeof(housing_data$yr_renovated))
print(typeof(housing_data$statezip))
print(typeof(housing_data$country))
attributes_table$Type = c ( "character", "double", "double", "double",
"integer", "integer", "double", "integer", "integer", "integer",
"integer", "integer", "integer", "integer",
"character", "character", "character", "character")
if (!require("kableExtra")) install.packages("kableExtra", dependencies = TRUE)
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
library(knitr)
# Generate a well-formatted table
styled_table <- kable(attributes_table, format = "html", caption = "ðŸ“Œ USA Housing Data") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F, position = "center") %>%
column_spec(1, bold = TRUE, color = "black") %>%
column_spec(2, italic = TRUE, color = "blue") %>%
column_spec(3, width = "40em") %>%
row_spec(0, bold = TRUE, color = "white", background = "black")
# Display the table
styled_table
View(attributes_table)
#PART 2
#Summary statistics for each attribute
# Install required package if not installed
if (!require("psych")) install.packages("psych", dependencies = TRUE)
# Load the library
library(psych)
describe(housing_data)
summary(housing_data$price)
describe(housing_data$price)
# Select only numeric columns
numeric_data <- housing_data[sapply(housing_data, is.numeric)]
# Create a summary table, ensuring NAs are handled correctly
summary_table <- data.frame(
Attribute = colnames(numeric_data),
Min = sapply(numeric_data, function(x) min(x, na.rm = TRUE)),
Max = sapply(numeric_data, function(x) max(x, na.rm = TRUE)),
Mean = sapply(numeric_data, function(x) mean(x, na.rm = TRUE)),
Median = sapply(numeric_data, function(x) median(x, na.rm = TRUE)),
SD = sapply(numeric_data, function(x) sd(x, na.rm = TRUE))
)
# Print the corrected summary table
print(summary_table)
# Melt the summary statistics data for plotting
library(reshape2)
summary_melted <- melt(summary_table, id.vars = "Attribute", variable.name = "Statistic")
library(ggplot2)
# Plot histograms of the statistics
ggplot(summary_melted, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
facet_wrap(~ Statistic, scales = "free") +
labs(title = "Histogram of Summary Statistics", x = "Value", y = "Frequency") +
theme_minimal()
ggplot(housing_data, aes(y=price)) + geom_boxplot(fill="steelblue", color ="black", outlier.color = "red", outlier.shape = 16, outlier.size = 3) + labs(title = "Boxplot of Housing Prices", y = "Price ($)") + theme_minimal(base_size = 14) + theme(plot.title = element_text(hjust = 0.5, face = "bold"), axis.text.y = element_text(color = "black"), axis.title.y = element_text(face = "bold"))
ggplot(housing_data, aes(y=price)) + geom_boxplot(fill="steelblue", color ="black", outlier.color = "red", outlier.shape = 16, outlier.size = 3) + stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "darkred") + labs(title = "Boxplot of Housing Prices", y = "Price ($)") + theme_minimal(base_size = 14) + theme(plot.title = element_text(hjust = 0.5, face = "bold"), axis.text.y = element_text(color = "black"), axis.title.y = element_text(face = "bold"))
ggplot(housing_data, aes(x=price)) + geom_boxplot(fill="steelblue", color ="black", outlier.color = "red", outlier.shape = 16, outlier.size = 3) + stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "darkred") + labs(title = "Boxplot of Housing Prices", x = "Price ($)") + theme_minimal(base_size = 14) + theme(plot.title = element_text(hjust = 0.5, face = "bold"), axis.text.x = element_text(color = "black"), axis.title.x = element_text(face = "bold"))
ggplot(housing_data, aes(y=price)) + geom_boxplot(fill="steelblue", color ="black", outlier.color = "red", outlier.shape = 16, outlier.size = 3) + stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "darkred") + labs(title = "Boxplot of Housing Prices", y = "Price ($)") + theme_minimal(base_size = 14) + theme(plot.title = element_text(hjust = 0.5, face = "bold"), axis.text.y = element_text(color = "black"), axis.title.y = element_text(face = "bold"))
ggplot(housing_data, aes(x = "", y=price)) + geom_boxplot(fill="steelblue", color ="black", outlier.color = "red", outlier.shape = 16, outlier.size = 3) + stat_summary(fun = mean, geom = "point", shape = 18, size = 4, color = "darkred") + labs(title = "Boxplot of Housing Prices", y = "Price ($)") + theme_minimal(base_size = 14) + theme(plot.title = element_text(hjust = 0.5, face = "bold"), axis.text.y = element_text(color = "black"), axis.title.y = element_text(face = "bold"), axis.text.x = element_blank(),axis.ticks.x = element_blank())
install.packages("dplyr")
library(dplyr)
ggplot(housing_data, aes(x = 1, y = price)) +
geom_jitter(width = 0.2, alpha = 0.5, color = "blue") +  # Scatter with jitter
geom_boxplot(width = 0.1, fill = "gray", alpha = 0.5, outlier.shape = NA) + # Boxplot overlay
stat_summary(fun = mean, geom = "point", color = "red", size = 3) + # Mean point
labs(
title = "Scatterplot of Price with Summary Statistics",
subtitle = paste0("Mean: ", round(housing_data$Mean, 2),
" | Median: ", round(housing_data$Median, 2),
" | SD: ", round(housing_data$SD, 2),
" | Min: ", round(housing_data$Min, 2),
" | Max: ", round(housing_data$Max, 2)),
x = "Observations",
y = "Price"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
#Rename column names as code
colnames(attributes_table) = Code
#Rename column names as code
colnames(attributes_table) = "Code"
#Rename column names as code
colnames(attributes_table) = "Code"
attributes_table2 = attributes_table[-c(1:18)]
attributes_table = all_of(attributes_table[1, 2, 19, 20])
#Rename column names as code
colnames(attributes_table) = "Code"
attributes_table2 = attributes_table[-c(1:18)]
attributes_table = all_of(attributes_table[-c(1, 2, 19, 20)])
bstats = basicStats (attributes_table) [c("Mean", "Stdev", "Median", "Min", "Max", "NAs")]
install.packages("fBasics")
library(fBasics)
bstats = basicStats (attributes_table) [c("Mean", "Stdev", "Median", "Min", "Max", "NAs")]
bstats = summary_table (attributes_table) [c("Mean", "Stdev", "Median", "Min", "Max", "NAs")]
bstats = summary (attributes_table) [c("Mean", "Stdev", "Median", "Min", "Max", "NAs")]
bstats2 = summary(attributes_table2) [c("Mean", "Stdev", "Median", "Min", "Max", "NAs")]
View(summary_table)
